@using Microsoft.AspNetCore.Identity
@using Tomoyo.Core.Models
@using Tomoyo.Core.Utilities
@inherits LayoutComponentBase

@inject NavigationManager Navigation
@inject AuthenticationStateProvider GetAuthenticationStateAsync
@inject UserManager<TomoyoUser> UserManager

<MudThemeProvider Theme="_theme" @ref="@_mudThemeProvider" @bind-IsDarkMode="@_isDarkMode"/>
<MudPopoverProvider/>
<MudDialogProvider/>
<MudSnackbarProvider/>
<MudLayout>
    <MudAppBar Elevation="1">
        <MudStaticNavDrawerToggle DrawerId="nav-drawer" Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start"/>
        <MudText Typo="Typo.h5" Class="ml-3">Tomoyo</MudText>
        <MudSpacer/>
        <AuthorizeView>
            <Authorized>
                <MudMenu>
                    <ActivatorContent>
                        <MudAvatar>
                            <MudImage Src="@_profilePictureUrl" FallbackSrc="@Assets["images/avatar.gif"]" Alt="@context.User.Identity?.Name" Size="Size.Small" />
                        </MudAvatar>
                    </ActivatorContent>
                    <ChildContent>
                        <MudMenuItem Href="@_profileUrl" Icon="@Icons.Material.Filled.Person">@context.User.Identity?.Name</MudMenuItem>
                        <MudMenuItem Href="settings" Icon="@Icons.Material.Filled.Settings">Settings</MudMenuItem>
                        <MudMenuItem Icon="@Icons.Material.Filled.Logout">
                            <form action="Account/Logout" method="post">
                                <AntiforgeryToken/>
                                <input type="hidden" name="ReturnUrl" value="@Navigation.ToBaseRelativePath(Navigation.Uri)"/>
                                <button type="submit" class="mud-nav-link mud-ripple">
                                    <MudIcon Icon="@Icons.Material.Filled.Logout" Color="Color.Info" Class="mr-3"></MudIcon> Logout
                                </button>
                            </form>
                        </MudMenuItem>
                    </ChildContent>
                </MudMenu>
                <MudButton Href="Account/Manage" Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Person">Account</MudButton>
            </Authorized>
            <NotAuthorized>
                <MudButton Href="Account/Login" Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Password">Login</MudButton>
            </NotAuthorized>
        </AuthorizeView>
    </MudAppBar>
    <MudDrawer id="nav-drawer" @bind-Open="_drawerOpen" ClipMode="DrawerClipMode.Always" Elevation="2">
        <NavMenu/>
    </MudDrawer>
    <MudMainContent Class="mt-16 pa-4">
        <MudContainer MaxWidth="MaxWidth.Large">
            @Body
        </MudContainer>
    </MudMainContent>
</MudLayout>


<div id="blazor-error-ui" data-nosnippet>
    An unhandled error has occurred.
    <a href="." class="reload">Reload</a>
    <span class="dismiss">🗙</span>
</div>

@code {
    private bool _drawerOpen = true;
    private bool _isDarkMode;
    private MudThemeProvider _mudThemeProvider;

    private string _profilePictureUrl = "";
    private string _profileUrl = "";

    private MudTheme _theme = new MudTheme()
    {
        Typography = new Typography()
        {
            Default = new DefaultTypography()
            {
                FontFamily = new[] { "M PLUS 1p", "sans-serif" }
            }
        }
    };
    
    protected override async Task OnInitializedAsync()
    {
        var authState = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
        if (authState.User.Identity == null)
        {
            return;
        }
        var tomoyoUser = await UserManager.GetUserAsync(authState.User);
        if (tomoyoUser == null)
        {
            return;
        }

        _profilePictureUrl = tomoyoUser.GetAvatarUrl();
        _profileUrl = tomoyoUser.GetProfileUrl();
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _isDarkMode = await _mudThemeProvider.GetSystemPreference();
            await _mudThemeProvider.WatchSystemPreference(OnSystemPreferenceChanged);
            StateHasChanged();
        }
    }

    private Task OnSystemPreferenceChanged(bool newValue)
    {
        _isDarkMode = newValue;
        StateHasChanged();
        return Task.CompletedTask;
    }
}